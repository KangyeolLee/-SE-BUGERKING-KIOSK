extends layouts/main.pug
block title
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/fullcalendar@5.4.0/main.min.css", integrity="sha256-uq9PNlMzB+1h01Ij9cx7zeE2OR2pLAfRw3uUUOOPKdA=", crossorigin="anonymous")


block content
    #salesControll
        - let today = moment().format('YYYY-MM-DD')
        - let todayRecord = records.find(record => record.content && moment(record.date).format('YYYY-MM-DD') === today );
        - let todayOrders = orders.filter(order => moment(order.date).format('YYYY-MM-DD') === today && order.isCompleted);

        .topArea 
            .container
                img.logo(src='build/img/logo.png' alt="버거킹 로고이미지")
                span.title 매출분석 

        .middleArea 
            .container 
                span.title 매출조회
                .divider
                .table
                    .input-area 
                        input(type='date' value=today).startDate-table
                        input(type='date' value=today).endDate-table
                        i(onclick='search()').font-icon.fas.fa-search
                    .table-area
                        table
                            tr.first
                                th 일자 
                                th 품명
                                th 비고
                                th 수량
                                th 단가

                            - let amount = 0;
                            - let total = 0;
                            each order in todayOrders
                                each menu in order.choices
                                    - total += menu.amount
                                    - amount += (menu.menu.price * menu.amount);
                                    tr
                                        td #{moment(order.date).format('YYYY-MM-DD HH:mm:ss')}
                                        td #{menu.menu.nameKr}
                                        td #{menu.menu.isCombo ? "세트" : "단품"}
                                        td #{menu.amount}
                                        td #{menu.menu.price * menu.amount}

                            if !(todayOrders.length)
                                tr.no-list
                                    td(colspan='5') 해당기간의 판매 실적이 없습니다.

                            tr.last
                                td 합계
                                td
                                td
                                td #{total}
                                td #{amount}    
                        
                    .button-area
                        .button CSV추출
                        .button(onClick='convertPage()') 그래프전환
                        //- .button(onClick='ttttt()') making
                        //- script.     
                        //-     const ttttt = async () => {
                        //-         await axios.get('/api/make-order');
                        //-     }

                .chart
                    .input-area 
                        input(type='date' value=today).startDate-chart
                        input(type='date' value=today).endDate-chart
                        select
                            option(value='sum') 매출액 통계
                            option(value='menu') 메뉴별 통계
                        select
                            option(value="month") 월별 
                            option(value="day") 일별 
                        i(onclick='search()').font-icon.fas.fa-search

                    canvas#myChart

                    .button-area
                        .button(onClick='convertPage()') 테이블전환

                        script. 
                            let toggleBtn = false;
                            const tableArea = document.querySelector('.table');
                            const chartArea = document.querySelector('.chart');                    
                            const convertPage = () => {
                                toggleBtn = !toggleBtn;

                                if(toggleBtn) {
                                    tableArea.style.display = 'none';
                                    chartArea.style.display = 'block';                    
                                } else {
                                    tableArea.style.display = 'block';
                                    chartArea.style.display = 'none';
                                }
                            }

                            const search = async () => {
                                let start, end;
                                let newOrders;

                                const tableDiv = document.querySelector('.table-area');
                                const tableContent = document.querySelector('.table-area table');
                                if (toggleBtn) {
                                    start = document.querySelector('.startDate-chart').value;
                                    end = document.querySelector('.endDate-chart').value;

                                    const nStart = new Date(start), nEnd = new Date(end);
                                    if(nStart > nEnd) {
                                        alert('범위를 다시 설정해주세요!');
                                        return;
                                    }

                                    newOrders = await axios.post('/api/get-orders', { start, end })
                                } else {
                                    start = document.querySelector('.startDate-table').value;
                                    end = document.querySelector('.endDate-table').value;

                                    const nStart = new Date(start), nEnd = new Date(end);
                                    if(nStart > nEnd) {
                                        alert('범위를 다시 설정해주세요!');
                                        return;
                                    }

                                    newOrders = await axios.post('/api/get-orders', { start, end })
                                }
                                
                                
                                const orderLists = newOrders.data.filter(order => order.isCompleted);
                                const totalMenus = orderLists.map(order => order.choices);
                                let totalCount =  0;
                                let totalAmount = 0;

                                totalMenus.forEach(menu => menu.forEach(el => totalCount += el.amount))
                                totalMenus.forEach(menu => menu.forEach(el => totalAmount += el.menu.price * el.amount))

                                tableDiv.removeChild(tableContent);


                                const table = document.createElement('table');

                                const trFirst = document.createElement('tr');
                                const trLast = document.createElement('tr');
                                trFirst.classList.add('first');
                                for(let i = 0; i < 5; i++) {
                                    let th = document.createElement('th');
                                    th.innerText = ['일자', '품명', '비고', '수량', '단가'][i];
                                    trFirst.appendChild(th);
                                }
                                table.appendChild(trFirst);

                                orderLists.forEach(order => {
                                    order.choices.forEach(menu => {
                                        let tr = document.createElement('tr');
                                        for(let i = 0; i < 5; i++) {
                                            let td = document.createElement('td');
                                            if(i == 0) td.innerText = moment(order.date).format('YYYY-MM-DD HH:mm:ss');
                                            else if(i == 1) td.innerText = menu.menu.nameKr;
                                            else if(i == 2) td.innerText = menu.menu.isCombo ? "세트" : "단품";
                                            else if(i == 3) td.innerText = menu.amount; 
                                            else if(i == 4) td.innerText = menu.menu.price * menu.amount;
                                            tr.appendChild(td);
                                        }
                                        table.appendChild(tr);
                                    })
                                })

                                if(!orderLists.length) {
                                    let tr = document.createElement('tr');
                                    let td = document.createElement('td');
                                    td.innerText = "해당기간의 판매 실적이 없습니다.";
                                    td.colSpan = '5';
                                    tr.appendChild(td);
                                    tr.classList.add('no-list')
                                    table.appendChild(tr);
                                }

                                trLast.classList.add('last');
                                for(let i = 0; i < 5; i++) {
                                    let td = document.createElement('td');
                                    if(i == 0) td.innerText = '합계';
                                    else if(i == 3) td.innerText = totalCount;
                                    else if(i == 4) td.innerText = totalAmount;
                                    trLast.appendChild(td);
                                }
                                table.appendChild(trLast);
                                tableDiv.appendChild(table);


                            }

                      
                
        .bottomArea 
            .container 
                span.title 매출기록
                .divider
                .record
                    .calendar-area 
                        #calendar(data-date=records)
                    .write-area
                        .title-area
                            span.record-title#record-date #{today}
                            span.record-title#record-special 특이사항
                            i.font-icon.far.fa-edit(onclick="setEditable()" style="display: inline")

                        .body-area
                            if todayRecord
                                pre.record-content #{todayRecord.content}
                            else
                                pre.record-content 기록된 사항이 없습니다.

                            .editable-area
                                form#record-form
                                    textarea(placeholder='특이사항을 기록해주세요...')#input-record
                                    .button-area
                                        .button(onclick="setEditable()") 취소
                                        input(value='완료' type='submit').button 

                            script.
                                let editStatus;
                                let records = !{JSON.stringify(records)};
                                const editButton = document.querySelector('.far.fa-edit');
                                const textarea = document.querySelector('.editable-area');
                                const alertMsg = document.querySelector('.record-content');
                                const textareaRecord = document.getElementById('input-record');

                                const setEditable = () => {
                                    editStatus = editButton.style.display;
                                 
                                    if(editStatus === 'inline') {
                                        alertMsg.style.display = 'none';
                                        editButton.style.display = 'none';
                                        textarea.style.display = 'flex';
                                    } else {
                                        textarea.style.display = 'none';
                                        alertMsg.style.display = 'block';
                                        editButton.style.display = 'inline';
                                    }
                                }

                                //- records.forEach(el => console.log(el.date.substring(0, 10)));

                                const editHandler = () => {
                                    const today = document.querySelector('.record-title#record-date').textContent;
                                    const record = records.find(el => el.content && el.date.substring(0, 10) === today);
                                    record ? textareaRecord.value = record.content : textareaRecord.value ="";
                                }

                                editButton.addEventListener('click', editHandler);

                                const form = document.getElementById('record-form');
                                form.addEventListener('submit', async (e) => {
                                    e.preventDefault();

                                    const today = document.querySelector('.record-title#record-date').textContent;
                                    
                                    const content = document.getElementById('input-record').value;
                                    textarea.style.display = 'none';
                                    alertMsg.style.display = 'block';
                                    editButton.style.display = 'inline';

                                    const { data } = await axios.post('api/submit-record', {
                                        date: today,
                                        content
                                    });

                                    records = data;
                                    localStorage.setItem('records', JSON.stringify(records));

                                    const recordEl = document.querySelector('.record-content');
                                    recordEl.innerText = content ? content : "기록된 사항이 없습니다.";

                                    ttt = document.querySelectorAll('.fc-daygrid-day.fc-day');
                                    ttt.forEach(el => {
                                        const date = el.getAttribute('data-date');
                                        records.forEach(d => {
                                            const dd = d.date.substring(0, 10);
                                            if(dd === date && d.content) {
                                                el.classList.add('with-record');
                                            }
                                        })
                                    })

                                    withRecords = document.querySelectorAll('.fc-daygrid-day.fc-day.with-record');
                                    withRecords.forEach(el => {
                                        let flag = false;
                                        const date = el.getAttribute('data-date');
                                        records.some(d => {
                                            const dd = d.date.substring(0, 10);
                                            if(dd === date && d.content) {
                                                flag = true;
                                            }
                                        });

                                        if(!flag) el.classList.remove('with-record');
                                    })
                                });

        
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.4.0/main.min.js" integrity="sha256-oenhI3DRqaPoTMAVBBzQUjOKPEdbdFFtTCNIosGwro0=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js" integrity="sha512-d9xgZrVZpmmQlfonhQUvTR7lMPtO7NkZMkA0ABN3PHCbKA5nqylQ/yWlFAyY6hYgdF1Qh6nYiuADWwKB4C2WSw==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.0/moment.min.js"></script>